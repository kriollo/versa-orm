permissions:
  contents: read
name: PHP Unit Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  phpunit:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: [ '7.4', '8.0', '8.1', '8.2', '8.3', '8.4' ]
        include:
          - php: '7.4'
            composer_platform: 'php-7.4'
          - php: '8.0'
            composer_platform: 'php-8.0'
          - php: '8.1'
            composer_platform: 'php-8.1'
          - php: '8.2'
            composer_platform: 'php-8.2'
          - php: '8.3'
            composer_platform: 'php-8.3'
          - php: '8.4'
            composer_platform: 'php-8.4'

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test
        ports:
          - 3306:3306

      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: mbstring, pdo, pdo_mysql, pdo_pgsql, xml
          ini-values: post_max_size=256M, memory_limit=2G
          coverage: xdebug

      - name: Cache composer
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ matrix.php }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-${{ matrix.php }}-
            ${{ runner.os }}-composer-

      - name: Setup DB clients (for tests)
        if: always()
        run: |
          sudo apt-get update
          sudo apt-get install -y default-mysql-client postgresql-client

      - name: Wait for DB services
        run: |
          echo "Waiting for MySQL..."
          for i in {1..30}; do
            mysql -h 127.0.0.1 -P 3306 -u root -proot -e 'select 1' >/dev/null 2>&1 && break || sleep 1
          done
          echo "Waiting for Postgres..."
          for i in {1..30}; do
            pg_isready -h 127.0.0.1 -p 5432 -U postgres >/dev/null 2>&1 && break || sleep 1
          done

      - name: Install composer dependencies
        run: composer install --no-progress --prefer-dist --no-interaction

      - name: Run SQLite tests
        run: vendor/bin/phpunit -c phpunit-sqlite-test.xml --colors=always || true

      - name: Ensure MySQL test user exists
        run: |
          echo "Creating MySQL user 'local' if not exists..."

          # wait for mysql to accept connections
          for i in $(seq 1 15); do
            mysql -h 127.0.0.1 -P 3306 -u root -proot -e 'select 1' >/dev/null 2>&1 && break || { echo "mysql attempt $i..."; sleep 2; }
          done

          # Create user 'local' and grant privileges (works with MySQL 8+)
          mysql -h 127.0.0.1 -P 3306 -u root -proot -e "CREATE USER IF NOT EXISTS 'local'@'%' IDENTIFIED BY 'local'; GRANT ALL PRIVILEGES ON test.* TO 'local'@'%'; FLUSH PRIVILEGES;" || true

      - name: Run MySQL tests
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: test
          DB_USERNAME: local
          DB_PASSWORD: local
        run: vendor/bin/phpunit -c phpunit-mysql-test.xml --colors=always || true

      - name: Ensure Postgres test role exists
        run: |
          echo "Creating 'local' role in Postgres if not exists..."

          # wait for postgres to accept connections
          for i in $(seq 1 15); do
            pg_isready -h 127.0.0.1 -p 5432 -U postgres >/dev/null 2>&1 && break || { echo "pg_isready attempt $i..."; sleep 2; }
          done

          # Check if role exists; if not, create it
          exists=$(PGPASSWORD=postgres psql -h 127.0.0.1 -p 5432 -U postgres -d test -tAc "SELECT 1 FROM pg_roles WHERE rolname='local';" || true)
          if [ -z "$exists" ]; then
            echo "Role 'local' not found, creating..."
            PGPASSWORD=postgres psql -h 127.0.0.1 -p 5432 -U postgres -d test -c "CREATE ROLE local WITH LOGIN PASSWORD 'local';" -v ON_ERROR_STOP=1
            PGPASSWORD=postgres psql -h 127.0.0.1 -p 5432 -U postgres -d test -c "GRANT ALL PRIVILEGES ON DATABASE \"test\" TO local;" -v ON_ERROR_STOP=1
          else
            echo "Role 'local' already exists."
          fi

      - name: Run PostgreSQL tests
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_DATABASE: test
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
        run: vendor/bin/phpunit -c phpunit-postgresql-test.xml --colors=always || true

      - name: Upload test results (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: phpunit-results-${{ matrix.php }}
          path: tests/_output
